def project_folder = 'spring-boot-hello'
pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID = "337901474843"
        AWS_DEFAULT_REGION = "us-east-1"
        IMAGE_REPO_NAME = "product-seller-service"
        IMAGE_TAG_LATEST = "product-seller-service-latest"
        IMAGE_TAG_VERSION = "product-seller-service-${env.BUILD_ID}"
        // IMAGE_TAG="spring-boot-hello_${env.BUILD_ID}"
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
    }
    tools {
        maven 'Maven 3.3.9'
    }

    stages {
        stage('Initialize') {
            steps {
                sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"                   
                '''
                println "project_folder =  ${project_folder} "
            }
        }


        stage('Build') {
            steps {
                dir(project_folder) {
                    sh 'mvn clean package'
                }
            }
        }

        stage('Docker Build') {
            steps {
                dir(project_folder) {
                    script {
                        app = docker.build("${IMAGE_REPO_NAME}:${IMAGE_TAG_VERSION}")
                    }
                }
            }
        }

        stage('Logging into AWS ECR') {
            steps {
                script {
                    sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                }
            }
        }

        // Uploading Docker images into AWS ECR
        stage('Pushing to ECR') {
            steps {
                script {

                    sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG_VERSION} ${REPOSITORY_URI}:$IMAGE_TAG_LATEST"

                    sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG_VERSION} ${REPOSITORY_URI}:$IMAGE_TAG_VERSION"

                    sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG_LATEST}"

                    sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG_VERSION}"

                }
            }
        }


        stage('clean up images') {
            steps {
                script {

                    sh "docker image rm ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG_LATEST}"

                    sh "docker image rm ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG_VERSION}"

                    sh "docker image rm  ${IMAGE_REPO_NAME}:${IMAGE_TAG_VERSION}"
                }
            }
        }

    }

}
