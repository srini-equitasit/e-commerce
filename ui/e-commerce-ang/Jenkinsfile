def project_folder='ui/e-commerce-ang'
pipeline {
  agent any
  environment {
      AWS_ACCOUNT_ID="337901474843"
      AWS_DEFAULT_REGION="us-east-1"
      IMAGE_REPO_NAME="e-commerce-ang"
      IMAGE_TAG="e-commerce-ang"
      IMAGE_TAG_LATEST="e-commerce-ang-latest"
      IMAGE_TAG_VERSION="e-commerce-ang-${env.BUILD_ID}"
      // IMAGE_TAG="emp-ui-app_${env.BUILD_ID}"
      REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
  }


  stages {

   stage ('Initialize') {
        steps {
            sh '''
                echo "PATH = ${PATH}"
                echo "sonar_srvr_url = ${sonar_srvr_url}"
                echo "sonar_token = ${sonar_token}"
            '''
            println "project_folder =  ${project_folder} "
        }
    }



   stage('Docker Build') {
      steps {
        dir(project_folder){
      	script{
      	   sh "docker build -t ${IMAGE_REPO_NAME}:${IMAGE_TAG_VERSION} --target ${IMAGE_TAG_VERSION}-STAGE ."
      	   // app = docker.build("${IMAGE_REPO_NAME}:${IMAGE_TAG_VERSION}")
      	}
        }
      }
    }

   stage('Logging into AWS ECR') {
        steps {
            script {
              sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
            }
        }
   }
   stage('Create Repository if not exist') {
       steps {
           script {
               sh "aws ecr describe-repositories --repository-names ${IMAGE_REPO_NAME} || aws ecr create-repository --repository-name ${IMAGE_REPO_NAME}"
           }
       }
   }

       // Uploading Docker images into AWS ECR

   stage('Pushing to ECR') {
    steps{
        script {

                    sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG_VERSION} ${REPOSITORY_URI}:$IMAGE_TAG_LATEST"

                    sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG_VERSION} ${REPOSITORY_URI}:$IMAGE_TAG_VERSION"

                    sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG_LATEST}"

                    sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG_VERSION}"
        }
       }
     }
        stage('clean up images') {
            steps {
                script {

                    sh "docker image rm ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG_LATEST}"

                    sh "docker image rm ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG_VERSION}"

                    sh "docker image rm  ${IMAGE_REPO_NAME}:${IMAGE_TAG_VERSION}"

                    sh "docker image rm  ${IMAGE_TAG_VERSION}-STAGE"
                }
            }
        }

  }
}
